Chapter7 Input and Output
7.4 Other Standard I/O Functions
7.4.5 The size_t fwrite() Function
The prototype for fwrite() is this:
size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb,
FILE * restrict fp);
The fwrite() function writes binary data to a file. The size_t type is defined in terms of the
standard C types. It is the type returned by the sizeof operator. Typically, it is unsigned int ,
but an implementation can choose another type. The pointer ptr is the address of the chunk
of data to be written. Also, size represents the size, in bytes, of the chunks to be written, and
nmemb represents the number of chunks to be written. As usual, fp identifies the file to be
written to. For instance, to save a data object (such as an array) that is 256 bytes in size, you
can do this:
char buffer[256];
fwrite(buffer, 256, 1, fp);
This call writes one chunk of 256 bytes from buffer to the file. Or, to save an array of 10
double values, you can do this:
double earnings[10];
fwrite(earnings, sizeof (double), 10, fp);
This call writes data from the earnings array to the file in 10 chunks, each of size double .
You probably noticed the odd declaration of const void * restrict ptr in the fwrite()
prototype. One problem with fwrite() is that its first argument is not a fixed type. For
instance, the first example used buffer , which is type pointer-to- char , and the second
example used earnings , which is type pointer-to- double . Under ANSI C function prototyping,
these actual arguments are converted to the pointer-to- void type, which acts as a sort of catchall
type for pointers. (Pre-ANSI C uses type char * for this argument, requiring you to typecast
actual arguments to that type.)
The fwrite() function returns the number of items successfully written. Normally, this equals
nmemb , but it can be less if there is a write error.