Chapter7 Input and Output
7.3 Adventures in Random Access: fseek() and ftell()
7.3.4 The fgetpos() and fsetpos() Functions
One potential problem with fseek() and ftell() is that they limit file sizes to values that can
be represented by type long . Perhaps two-billion bytes seem more than adequate, but the everincreasing
capacities of storage devices makes larger files possible. ANSI C introduced two new
positioning functions designed to work with larger file sizes. Instead of using a long value to
represent a position, it uses a new type, called fpos_t (for file position type) for that purpose.
The fpos_t type is not a fundamental type; rather, it is defined in terms of other types. A variable
or data object of fpos_t type can specify a location within a file, and it cannot be an array
type, but its nature is not specified beyond that. Implementations can then provide a type
to meet the needs of a particular platform; the type could, for example, be implemented as a
structure.
ANSI C does define how fpos_t is used. The fgetpos() function has this prototype:
int fgetpos(FILE * restrict stream, fpos_t * restrict pos);
When called, it places an fpos_t value in the location pointed to by pos ; the value describes a
location in the file. The function returns zero if successful and a nonzero value for failure.
The fsetpos() function has this prototype:
int fsetpos(FILE *stream, const fpos_t *pos);
When called, it uses the fpos_t value in the location pointed to by pos to set the file pointer
to the location indicated by that value. The function returns zero if successful and a nonzero
value for failure. The fpos_t value should have been obtained by a previous call to fgetpos().