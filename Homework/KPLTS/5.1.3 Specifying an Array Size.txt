Chapter5 Pointers and Arrays
5.1 Arrays
5.1.3 Specifying an Array Size
So far, the examples have used integer constants when declaring arrays:
#define SIZE 4
int main(void)
{
	int arr[SIZE]; // symbolic integer constant
	double lots[144]; // literal integer constant
	...
What else is allowed? Until the C99 standard, the answer has been that you have to use a
constant integer expression between the brackets when declaring an array. A constant integer
expression is one formed from integer constants. For this purpose, a sizeof expression is
considered an integer constant, but (unlike the case in C++) a const value isn’t. Also, the value
of the expression must be greater than 0:
int n = 5;
int m = 8;
float a1[5]; 			// yes
float a2[5*2 + 1]; 		// yes
float a3[sizeof(int) + 1]; 	// yes
float a4[-4]; 			// no, size must be > 0
float a5[0]; 			// no, size must be > 0
float a6[2.5];			// no, size must be an integer
float a7[(int)2.5]; 		// yes, typecast float to int constant
float a8[n]; 			// not allowed before C99
float a9[m]; 			// not allowed before C99
As the comments indicate, C compilers following the C90 standard would not allow the last
two declarations. As of C99, however, C does allow them, but they create a new breed of array,
something called a variable-length array , or VLA for short. (C11 retreats from this bold initiative,
making VLAs an optional rather than mandatory language feature.)
C99 introduced variable-length arrays primarily to allow C to become a better language
for numerical computing. For instance, VLAs make it easier to convert existing libraries of
FORTRAN numerical calculation routines to C. VLAs have some restrictions; for example, you
can’t initialize a VLA in its declaration. This chapter will return to VLAs later, after you’ve
learned enough to understand more about the limitations of the classic C array.
