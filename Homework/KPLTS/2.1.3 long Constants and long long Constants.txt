Chapter2 Type, Operation and Expressions
2.1 Basic C Data Types
2.1.3 long Constants and long long Constants
Normally, when you use a number such as 2345 in your program code, it is stored as an int
type. What if you use a number such as 1000000 on a system in which int will not hold such
a large number? Then the compiler treats it as a long int , assuming that type is large enough.
If the number is larger than the long maximum, C treats it as unsigned long . If that is still
insufficient, C treats the value as long long or unsigned long long , if those types are
available.
Octal and hexadecimal constants are treated as type int unless the value is too large. Then the
compiler tries unsigned int . If that doesnâ€™t work, it tries, in order, long , unsigned long ,
long long , and unsigned long long .
Sometimes you might want the compiler to store a small number as a long integer.
Programming that involves explicit use of memory addresses on an IBM PC, for instance, can
create such a need. Also, some standard C functions require type long values. To cause a small
constant to be treated as type long , you can append an l (lowercase L ) or L as a suffix. The
second form is better because it looks less like the digit 1. Therefore, a system with a 16-bit
int and a 32-bit long treats the integer 7 as 16 bits and the integer 7L as 32 bits. The l and L
suffixes can also be used with octal and hex integers, as in 020L and 0x10L .
Similarly, on those systems supporting the long long type, you can use an ll or LL suffix to
indicate a long long value, as in 3LL . Add a u or U to the suffix for unsigned long long , as
in 5ull or 10LLU or 6LLU or 9Ull .
