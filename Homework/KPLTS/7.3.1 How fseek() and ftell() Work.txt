Chapter7 Input and Output
7.3 Adventures in Random Access: fseek() and ftell()
7.3.1 How fseek() and ftell() Work
The fseek() function enables you to treat a file like an array and move directly to any particular
byte in a file opened by fopen() . To see how it works, letâ€™s create a program
that displays a file in reverse order. Note that fseek() has three arguments and returns
an int value. The ftell() function returns the current position in a file as a long value.
#include <stdio.h>
#include <stdlib.h>
#define CNTL_Z '\032' /* eof marker in DOS text files */
#define SLEN 81
int main(void)
{
	char file[SLEN];
	char ch;
	FILE *fp;
	long count, last;
	puts("Enter the name of the file to be processed:");
	scanf("%80s", file);
	if ((fp = fopen(file,"rb")) == NULL)
	{ /* read-only mode */
		printf("reverse can't open %s\n", file);
		exit(EXIT_FAILURE);
	}
	fseek(fp, 0L, SEEK_END); /* go to end of file */
	last = ftell(fp);
	for (count = 1L; count <= last; count++)
	{
		fseek(fp, -count, SEEK_END); /* go backward */
		ch = getc(fp);
		if (ch != CNTL_Z && ch != '\r') /* MS-DOS files */
			putchar(ch);
	}
	putchar('\n');
	fclose(fp);
	return 0;
}

Here is the output for a sample file:
Enter the name of the file to be processed:
Cluv
.C ni eno naht ylevol erom margorp a
ees reven llahs I taht kniht I
This program uses the binary mode so that it can deal with both MS-DOS text and Unix files.
However, it may not work correctly in an environment that uses some other format for text
files.